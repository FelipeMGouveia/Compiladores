/*
* generated by Xtext
*/
package br.poli.ecomp.compiladores.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class NotCGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationsAssignment_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		
		//Code:
		//	declarations+=Declaration* functions+=Function*;
		public ParserRule getRule() { return rule; }

		//declarations+=Declaration* functions+=Function*
		public Group getGroup() { return cGroup; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_0() { return cDeclarationsAssignment_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0_0() { return cDeclarationsDeclarationParserRuleCall_0_0; }

		//functions+=Function*
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_0() { return cFunctionsFunctionParserRuleCall_1_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamFuncParamParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//Function:
		//	type=Type id=ID "(" param=FuncParam? ")" block=Block;
		public ParserRule getRule() { return rule; }

		//type=Type id=ID "(" param=FuncParam? ")" block=Block
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//param=FuncParam?
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//FuncParam
		public RuleCall getParamFuncParamParserRuleCall_3_0() { return cParamFuncParamParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }
	}

	public class FuncParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextFuncParamParserRuleCall_2_1_0 = (RuleCall)cNextAssignment_2_1.eContents().get(0);
		
		//FuncParam:
		//	type=Type id=ID ("," next=FuncParam)?;
		public ParserRule getRule() { return rule; }

		//type=Type id=ID ("," next=FuncParam)?
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//("," next=FuncParam)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//next=FuncParam
		public Assignment getNextAssignment_2_1() { return cNextAssignment_2_1; }

		//FuncParam
		public RuleCall getNextFuncParamParserRuleCall_2_1_0() { return cNextFuncParamParserRuleCall_2_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" statement=Statement "}";
		public ParserRule getRule() { return rule; }

		//"{" statement=Statement "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		
		//Statement:
		//	{Statement} declarations+=Declaration* commands+=Command*;
		public ParserRule getRule() { return rule; }

		//{Statement} declarations+=Declaration* commands+=Command*
		public Group getGroup() { return cGroup; }

		//{Statement}
		public Action getStatementAction_0() { return cStatementAction_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }

		//commands+=Command*
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0() { return cCommandsCommandParserRuleCall_2_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturnCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Command:
		//	IfCommand | WhileCommand | ReturnCommand;
		public ParserRule getRule() { return rule; }

		//IfCommand | WhileCommand | ReturnCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfCommand
		public RuleCall getIfCommandParserRuleCall_0() { return cIfCommandParserRuleCall_0; }

		//WhileCommand
		public RuleCall getWhileCommandParserRuleCall_1() { return cWhileCommandParserRuleCall_1; }

		//ReturnCommand
		public RuleCall getReturnCommandParserRuleCall_2() { return cReturnCommandParserRuleCall_2; }
	}

	public class IfCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfBlockBlockParserRuleCall_4_0 = (RuleCall)cIfBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//IfCommand:
		//	"if" "(" expr=Expr ")" ifBlock=Block ("else" elseBlock=Block)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" expr=Expr ")" ifBlock=Block ("else" elseBlock=Block)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//ifBlock=Block
		public Assignment getIfBlockAssignment_4() { return cIfBlockAssignment_4; }

		//Block
		public RuleCall getIfBlockBlockParserRuleCall_4_0() { return cIfBlockBlockParserRuleCall_4_0; }

		//("else" elseBlock=Block)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseBlock=Block
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }

		//Block
		public RuleCall getElseBlockBlockParserRuleCall_5_1_0() { return cElseBlockBlockParserRuleCall_5_1_0; }
	}

	public class WhileCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWhileBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhileBlockBlockParserRuleCall_4_0 = (RuleCall)cWhileBlockAssignment_4.eContents().get(0);
		
		//WhileCommand:
		//	"while" "(" expr=Expr ")" whileBlock=Block;
		public ParserRule getRule() { return rule; }

		//"while" "(" expr=Expr ")" whileBlock=Block
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//whileBlock=Block
		public Assignment getWhileBlockAssignment_4() { return cWhileBlockAssignment_4; }

		//Block
		public RuleCall getWhileBlockBlockParserRuleCall_4_0() { return cWhileBlockBlockParserRuleCall_4_0; }
	}

	public class ReturnCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnCommand:
		//	"return" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"return" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRDeclarationParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Declaration:
		//	type=Type value=RDeclaration ";";
		public ParserRule getRule() { return rule; }

		//type=Type value=RDeclaration ";"
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//value=RDeclaration
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RDeclaration
		public RuleCall getValueRDeclarationParserRuleCall_1_0() { return cValueRDeclarationParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class RDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDDeclarationParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRDeclarationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNextRDeclarationParserRuleCall_1_2_0 = (RuleCall)cNextAssignment_1_2.eContents().get(0);
		
		//RDeclaration:
		//	id=IDDeclaration ({RDeclaration.left=current} "," next=RDeclaration)?;
		public ParserRule getRule() { return rule; }

		//id=IDDeclaration ({RDeclaration.left=current} "," next=RDeclaration)?
		public Group getGroup() { return cGroup; }

		//id=IDDeclaration
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//IDDeclaration
		public RuleCall getIdIDDeclarationParserRuleCall_0_0() { return cIdIDDeclarationParserRuleCall_0_0; }

		//({RDeclaration.left=current} "," next=RDeclaration)?
		public Group getGroup_1() { return cGroup_1; }

		//{RDeclaration.left=current}
		public Action getRDeclarationLeftAction_1_0() { return cRDeclarationLeftAction_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//next=RDeclaration
		public Assignment getNextAssignment_1_2() { return cNextAssignment_1_2; }

		//RDeclaration
		public RuleCall getNextRDeclarationParserRuleCall_1_2_0() { return cNextRDeclarationParserRuleCall_1_2_0; }
	}

	public class IDDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//IDDeclaration:
		//	id=ID ("=" value=Expr)?;
		public ParserRule getRule() { return rule; }

		//id=ID ("=" value=Expr)?
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//("=" value=Expr)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=Expr
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_1_0() { return cValueExprParserRuleCall_1_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expr returns Expression:
		//	Term ({Expr.left=current} operator=("+" | "-") right=Term)*;
		public ParserRule getRule() { return rule; }

		//Term ({Expr.left=current} operator=("+" | "-") right=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({Expr.left=current} operator=("+" | "-") right=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expr.left=current}
		public Action getExprLeftAction_1_0() { return cExprLeftAction_1_0; }

		//operator=("+" | "-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }

		//right=Term
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Term
		public RuleCall getRightTermParserRuleCall_1_2_0() { return cRightTermParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Term returns Expression:
		//	Factor ({Term.left=current} operator=("*" | "/") right=Factor)*;
		public ParserRule getRule() { return rule; }

		//Factor ({Term.left=current} operator=("*" | "/") right=Factor)*
		public Group getGroup() { return cGroup; }

		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }

		//({Term.left=current} operator=("*" | "/") right=Factor)*
		public Group getGroup_1() { return cGroup_1; }

		//{Term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }

		//operator=("*" | "/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"*" | "/"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }

		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomicParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor returns Expression:
		//	Atomic ({Factor.left=current} operator="^" right=Atomic)*;
		public ParserRule getRule() { return rule; }

		//Atomic ({Factor.left=current} operator="^" right=Atomic)*
		public Group getGroup() { return cGroup; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }

		//({Factor.left=current} operator="^" right=Atomic)*
		public Group getGroup_1() { return cGroup_1; }

		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }

		//operator="^"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"^"
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }

		//right=Atomic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Atomic
		public RuleCall getRightAtomicParserRuleCall_1_2_0() { return cRightAtomicParserRuleCall_1_2_0; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cResultAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cResultElementParserRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		
		//Atomic returns Expression:
		//	"(" value=Expr ")" | result=Element;
		public ParserRule getRule() { return rule; }

		//"(" value=Expr ")" | result=Element
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" value=Expr ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//value=Expr
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_0_1_0() { return cValueExprParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//result=Element
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }

		//Element
		public RuleCall getResultElementParserRuleCall_1_0() { return cResultElementParserRuleCall_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	INT | ID;
		public ParserRule getRule() { return rule; }

		//INT | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueIntKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFloatKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cValueCharKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		
		//Type:
		//	value="int" | value="float" | value="char";
		public ParserRule getRule() { return rule; }

		//value="int" | value="float" | value="char"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="int"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"int"
		public Keyword getValueIntKeyword_0_0() { return cValueIntKeyword_0_0; }

		//value="float"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"float"
		public Keyword getValueFloatKeyword_1_0() { return cValueFloatKeyword_1_0; }

		//value="char"
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//"char"
		public Keyword getValueCharKeyword_2_0() { return cValueCharKeyword_2_0; }
	}
	
	
	private final CodeElements pCode;
	private final FunctionElements pFunction;
	private final FuncParamElements pFuncParam;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final CommandElements pCommand;
	private final IfCommandElements pIfCommand;
	private final WhileCommandElements pWhileCommand;
	private final ReturnCommandElements pReturnCommand;
	private final DeclarationElements pDeclaration;
	private final RDeclarationElements pRDeclaration;
	private final IDDeclarationElements pIDDeclaration;
	private final ExprElements pExpr;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final AtomicElements pAtomic;
	private final ElementElements pElement;
	private final TypeElements pType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NotCGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCode = new CodeElements();
		this.pFunction = new FunctionElements();
		this.pFuncParam = new FuncParamElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pCommand = new CommandElements();
		this.pIfCommand = new IfCommandElements();
		this.pWhileCommand = new WhileCommandElements();
		this.pReturnCommand = new ReturnCommandElements();
		this.pDeclaration = new DeclarationElements();
		this.pRDeclaration = new RDeclarationElements();
		this.pIDDeclaration = new IDDeclarationElements();
		this.pExpr = new ExprElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pAtomic = new AtomicElements();
		this.pElement = new ElementElements();
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.poli.ecomp.compiladores.NotC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Code:
	//	declarations+=Declaration* functions+=Function*;
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}

	//Function:
	//	type=Type id=ID "(" param=FuncParam? ")" block=Block;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//FuncParam:
	//	type=Type id=ID ("," next=FuncParam)?;
	public FuncParamElements getFuncParamAccess() {
		return pFuncParam;
	}
	
	public ParserRule getFuncParamRule() {
		return getFuncParamAccess().getRule();
	}

	//Block:
	//	"{" statement=Statement "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Statement:
	//	{Statement} declarations+=Declaration* commands+=Command*;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Command:
	//	IfCommand | WhileCommand | ReturnCommand;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//IfCommand:
	//	"if" "(" expr=Expr ")" ifBlock=Block ("else" elseBlock=Block)?;
	public IfCommandElements getIfCommandAccess() {
		return pIfCommand;
	}
	
	public ParserRule getIfCommandRule() {
		return getIfCommandAccess().getRule();
	}

	//WhileCommand:
	//	"while" "(" expr=Expr ")" whileBlock=Block;
	public WhileCommandElements getWhileCommandAccess() {
		return pWhileCommand;
	}
	
	public ParserRule getWhileCommandRule() {
		return getWhileCommandAccess().getRule();
	}

	//ReturnCommand:
	//	"return" expr=Expr ";";
	public ReturnCommandElements getReturnCommandAccess() {
		return pReturnCommand;
	}
	
	public ParserRule getReturnCommandRule() {
		return getReturnCommandAccess().getRule();
	}

	//Declaration:
	//	type=Type value=RDeclaration ";";
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//RDeclaration:
	//	id=IDDeclaration ({RDeclaration.left=current} "," next=RDeclaration)?;
	public RDeclarationElements getRDeclarationAccess() {
		return pRDeclaration;
	}
	
	public ParserRule getRDeclarationRule() {
		return getRDeclarationAccess().getRule();
	}

	//IDDeclaration:
	//	id=ID ("=" value=Expr)?;
	public IDDeclarationElements getIDDeclarationAccess() {
		return pIDDeclaration;
	}
	
	public ParserRule getIDDeclarationRule() {
		return getIDDeclarationAccess().getRule();
	}

	//Expr returns Expression:
	//	Term ({Expr.left=current} operator=("+" | "-") right=Term)*;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//Term returns Expression:
	//	Factor ({Term.left=current} operator=("*" | "/") right=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Factor returns Expression:
	//	Atomic ({Factor.left=current} operator="^" right=Atomic)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//Atomic returns Expression:
	//	"(" value=Expr ")" | result=Element;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//Element:
	//	INT | ID;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Type:
	//	value="int" | value="float" | value="char";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
