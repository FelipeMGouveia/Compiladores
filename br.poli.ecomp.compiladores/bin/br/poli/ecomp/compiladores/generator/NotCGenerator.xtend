/*
 * generated by Xtext
 */
package br.poli.ecomp.compiladores.generator

import br.poli.ecomp.compiladores.notC.Code
import br.poli.ecomp.compiladores.notC.Declaration
import br.poli.ecomp.compiladores.notC.Expr
import br.poli.ecomp.compiladores.notC.Expr2
import br.poli.ecomp.compiladores.notC.Expr3
import br.poli.ecomp.compiladores.notC.Expr5
import br.poli.ecomp.compiladores.notC.Function
import br.poli.ecomp.compiladores.notC.IDDeclaration
import br.poli.ecomp.compiladores.notC.RDeclaration
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension org.eclipse.xtext.EcoreUtil2.*
import br.poli.ecomp.compiladores.notC.Expression

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class NotCGenerator implements IGenerator {

//«»
	def compileCode(Code code)
	'''«IF code.declarations != null»«FOR declaration : code.declarations»«declaration.compile»
«ENDFOR»«ENDIF»«IF code.functions != null»«FOR function : code.functions»function.compile«ENDFOR»«ENDIF»
	'''
	def dispatch compile(Declaration declaration)
	'''«declaration.type» «declaration.value.compile»;'''
	def dispatch compile(RDeclaration rDeclaration)
	'''«IF rDeclaration.id != null»«rDeclaration.id.compile»«ENDIF»«IF rDeclaration.left != null»«rDeclaration.left.compile»«ENDIF»«IF rDeclaration.next != null», «rDeclaration.next.compile»«ENDIF»'''
	def dispatch compile(IDDeclaration idDeclaration)
	'''«idDeclaration.id»«IF idDeclaration.value != null» = «idDeclaration.value.compile»«ENDIF»'''
	
	def dispatch compile(Expression expr)
	'''«IF expr.result != null»«expr.result.compile»«ENDIF»«IF expr.value != null»( «expr.value.compile» )«ENDIF»«IF expr.left != null»«expr.left.compile»«ENDIF»«IF expr.operator != null» «expr.operator» «ENDIF»«IF expr.right != null»«expr.right.compile»«ENDIF»'''
	def dispatch compile(Expr5 expr)
	'''«expr.value»'''
		
	def dispatch compile(Function function)
	''''''
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(e: resource.allContents.toIterable.filter(Code)) 
		{ 
			fsa.generateFile(resource.normalizedURI.lastSegment, e.compileCode);
		}
	}
}
