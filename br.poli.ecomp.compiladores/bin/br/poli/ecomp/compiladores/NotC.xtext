grammar br.poli.ecomp.compiladores.NotC with org.eclipse.xtext.common.Terminals

generate notC "http://www.poli.br/ecomp/compiladores/NotC"

Code: (declarations+=Declaration)* (functions+=Function)*;

Function: type=Type id=ID '(' (param=FuncParam)? ')' block=Block ;
FuncParam: type=Type id=ID (',' next=FuncParam)? ;

Block: '{' statement=Statement '}';
Statement: {Statement} (declarations+=Declaration)* (commands+=Command)* ;

Command: IfCommand | WhileCommand | ReturnCommand;
IfCommand: 'if' '(' expr=Expr ')' ifBlock = Block ('else' elseBlock=Block)?;
WhileCommand: 'while' '(' expr=Expr ')' whileBlock=Block;
ReturnCommand: 'return' (expr=Expr) ';';

Declaration: type=Type  value=RDeclaration ';' ;
RDeclaration: id=IDDeclaration ({RDeclaration.left=current}',' next=RDeclaration)?;

IDDeclaration: id=ID ('=' value=Expr)? ;

Expr returns Expression: Term ({Expr.left=current} (operator=('+' | '-' ))right=Term )*;
Term returns Expression: Factor ({Term.left=current} (operator=('*' | '/')) right=Factor)*;
Factor returns Expression: Atomic ({Factor.left=current} (operator=('^')) right=Atomic)*;
Atomic returns Expression: '(' value=Expr ')' | result=Element;
Element: INT | ID;

Type: (value = 'int'| value = 'float'| value ='char');
