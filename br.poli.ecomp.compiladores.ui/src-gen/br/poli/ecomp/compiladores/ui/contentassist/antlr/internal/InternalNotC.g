/*
* generated by Xtext
*/
grammar InternalNotC;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package br.poli.ecomp.compiladores.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package br.poli.ecomp.compiladores.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import br.poli.ecomp.compiladores.services.NotCGrammarAccess;

}

@parser::members {
 
 	private NotCGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(NotCGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCode
entryRuleCode 
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCodeAccess().getGroup()); }
(rule__Code__Group__0)
{ after(grammarAccess.getCodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFuncParam
entryRuleFuncParam 
:
{ before(grammarAccess.getFuncParamRule()); }
	 ruleFuncParam
{ after(grammarAccess.getFuncParamRule()); } 
	 EOF 
;

// Rule FuncParam
ruleFuncParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFuncParamAccess().getGroup()); }
(rule__FuncParam__Group__0)
{ after(grammarAccess.getFuncParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfCommand
entryRuleIfCommand 
:
{ before(grammarAccess.getIfCommandRule()); }
	 ruleIfCommand
{ after(grammarAccess.getIfCommandRule()); } 
	 EOF 
;

// Rule IfCommand
ruleIfCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfCommandAccess().getGroup()); }
(rule__IfCommand__Group__0)
{ after(grammarAccess.getIfCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileCommand
entryRuleWhileCommand 
:
{ before(grammarAccess.getWhileCommandRule()); }
	 ruleWhileCommand
{ after(grammarAccess.getWhileCommandRule()); } 
	 EOF 
;

// Rule WhileCommand
ruleWhileCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileCommandAccess().getGroup()); }
(rule__WhileCommand__Group__0)
{ after(grammarAccess.getWhileCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnCommand
entryRuleReturnCommand 
:
{ before(grammarAccess.getReturnCommandRule()); }
	 ruleReturnCommand
{ after(grammarAccess.getReturnCommandRule()); } 
	 EOF 
;

// Rule ReturnCommand
ruleReturnCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnCommandAccess().getGroup()); }
(rule__ReturnCommand__Group__0)
{ after(grammarAccess.getReturnCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRDeclaration
entryRuleRDeclaration 
:
{ before(grammarAccess.getRDeclarationRule()); }
	 ruleRDeclaration
{ after(grammarAccess.getRDeclarationRule()); } 
	 EOF 
;

// Rule RDeclaration
ruleRDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRDeclarationAccess().getGroup()); }
(rule__RDeclaration__Group__0)
{ after(grammarAccess.getRDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIDDeclaration
entryRuleIDDeclaration 
:
{ before(grammarAccess.getIDDeclarationRule()); }
	 ruleIDDeclaration
{ after(grammarAccess.getIDDeclarationRule()); } 
	 EOF 
;

// Rule IDDeclaration
ruleIDDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIDDeclarationAccess().getGroup()); }
(rule__IDDeclaration__Group__0)
{ after(grammarAccess.getIDDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getGroup()); }
(rule__Expr__Group__0)
{ after(grammarAccess.getExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactor
entryRuleFactor 
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactorAccess().getGroup()); }
(rule__Factor__Group__0)
{ after(grammarAccess.getFactorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getIfCommandParserRuleCall_0()); }
	ruleIfCommand
{ after(grammarAccess.getCommandAccess().getIfCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getWhileCommandParserRuleCall_1()); }
	ruleWhileCommand
{ after(grammarAccess.getCommandAccess().getWhileCommandParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getReturnCommandParserRuleCall_2()); }
	ruleReturnCommand
{ after(grammarAccess.getCommandAccess().getReturnCommandParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getOperatorPlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getExprAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getExprAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getExprAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getOperatorAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getTermAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getOperatorSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getTermAccess().getOperatorSolidusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
(rule__Atomic__Group_0__0)
{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getResultAssignment_1()); }
(rule__Atomic__ResultAssignment_1)
{ after(grammarAccess.getAtomicAccess().getResultAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getElementAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getElementAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getValueAssignment_0()); }
(rule__Type__ValueAssignment_0)
{ after(grammarAccess.getTypeAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getValueAssignment_1()); }
(rule__Type__ValueAssignment_1)
{ after(grammarAccess.getTypeAccess().getValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getValueAssignment_2()); }
(rule__Type__ValueAssignment_2)
{ after(grammarAccess.getTypeAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Code__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__0__Impl
	rule__Code__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getDeclarationsAssignment_0()); }
(rule__Code__DeclarationsAssignment_0)*
{ after(grammarAccess.getCodeAccess().getDeclarationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Code__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getFunctionsAssignment_1()); }
(rule__Code__FunctionsAssignment_1)*
{ after(grammarAccess.getCodeAccess().getFunctionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getTypeAssignment_0()); }
(rule__Function__TypeAssignment_0)
{ after(grammarAccess.getFunctionAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getIdAssignment_1()); }
(rule__Function__IdAssignment_1)
{ after(grammarAccess.getFunctionAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamAssignment_3()); }
(rule__Function__ParamAssignment_3)?
{ after(grammarAccess.getFunctionAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getBlockAssignment_5()); }
(rule__Function__BlockAssignment_5)
{ after(grammarAccess.getFunctionAccess().getBlockAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FuncParam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuncParam__Group__0__Impl
	rule__FuncParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getTypeAssignment_0()); }
(rule__FuncParam__TypeAssignment_0)
{ after(grammarAccess.getFuncParamAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FuncParam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuncParam__Group__1__Impl
	rule__FuncParam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getIdAssignment_1()); }
(rule__FuncParam__IdAssignment_1)
{ after(grammarAccess.getFuncParamAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FuncParam__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuncParam__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getGroup_2()); }
(rule__FuncParam__Group_2__0)?
{ after(grammarAccess.getFuncParamAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FuncParam__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuncParam__Group_2__0__Impl
	rule__FuncParam__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getFuncParamAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FuncParam__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuncParam__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getNextAssignment_2_1()); }
(rule__FuncParam__NextAssignment_2_1)
{ after(grammarAccess.getFuncParamAccess().getNextAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementAssignment_1()); }
(rule__Block__StatementAssignment_1)
{ after(grammarAccess.getBlockAccess().getStatementAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStatementAction_0()); }
(

)
{ after(grammarAccess.getStatementAccess().getStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
	rule__Statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getDeclarationsAssignment_1()); }
(rule__Statement__DeclarationsAssignment_1)*
{ after(grammarAccess.getStatementAccess().getDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getCommandsAssignment_2()); }
(rule__Statement__CommandsAssignment_2)*
{ after(grammarAccess.getStatementAccess().getCommandsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group__0__Impl
	rule__IfCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfCommandAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group__1__Impl
	rule__IfCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfCommandAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCommand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group__2__Impl
	rule__IfCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getExprAssignment_2()); }
(rule__IfCommand__ExprAssignment_2)
{ after(grammarAccess.getIfCommandAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCommand__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group__3__Impl
	rule__IfCommand__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfCommandAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCommand__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group__4__Impl
	rule__IfCommand__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getIfBlockAssignment_4()); }
(rule__IfCommand__IfBlockAssignment_4)
{ after(grammarAccess.getIfCommandAccess().getIfBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCommand__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getGroup_5()); }
(rule__IfCommand__Group_5__0)?
{ after(grammarAccess.getIfCommandAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfCommand__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group_5__0__Impl
	rule__IfCommand__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getElseKeyword_5_0()); }

	'else' 

{ after(grammarAccess.getIfCommandAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCommand__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCommand__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getElseBlockAssignment_5_1()); }
(rule__IfCommand__ElseBlockAssignment_5_1)
{ after(grammarAccess.getIfCommandAccess().getElseBlockAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileCommand__Group__0__Impl
	rule__WhileCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileCommandAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileCommandAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileCommand__Group__1__Impl
	rule__WhileCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileCommandAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileCommandAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileCommand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileCommand__Group__2__Impl
	rule__WhileCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileCommand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileCommandAccess().getExprAssignment_2()); }
(rule__WhileCommand__ExprAssignment_2)
{ after(grammarAccess.getWhileCommandAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileCommand__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileCommand__Group__3__Impl
	rule__WhileCommand__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileCommand__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileCommandAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileCommandAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileCommand__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileCommand__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileCommand__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileCommandAccess().getWhileBlockAssignment_4()); }
(rule__WhileCommand__WhileBlockAssignment_4)
{ after(grammarAccess.getWhileCommandAccess().getWhileBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ReturnCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnCommand__Group__0__Impl
	rule__ReturnCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnCommandAccess().getReturnKeyword_0()); }

	'return' 

{ after(grammarAccess.getReturnCommandAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnCommand__Group__1__Impl
	rule__ReturnCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnCommandAccess().getExprAssignment_1()); }
(rule__ReturnCommand__ExprAssignment_1)
{ after(grammarAccess.getReturnCommandAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnCommand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnCommand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnCommandAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getReturnCommandAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getValueAssignment_1()); }
(rule__Declaration__ValueAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getDeclarationAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RDeclaration__Group__0__Impl
	rule__RDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDeclarationAccess().getIdAssignment_0()); }
(rule__RDeclaration__IdAssignment_0)
{ after(grammarAccess.getRDeclarationAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDeclarationAccess().getGroup_1()); }
(rule__RDeclaration__Group_1__0)?
{ after(grammarAccess.getRDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RDeclaration__Group_1__0__Impl
	rule__RDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDeclarationAccess().getRDeclarationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getRDeclarationAccess().getRDeclarationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RDeclaration__Group_1__1__Impl
	rule__RDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDeclarationAccess().getCommaKeyword_1_1()); }

	',' 

{ after(grammarAccess.getRDeclarationAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RDeclaration__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RDeclaration__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RDeclaration__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDeclarationAccess().getNextAssignment_1_2()); }
(rule__RDeclaration__NextAssignment_1_2)
{ after(grammarAccess.getRDeclarationAccess().getNextAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IDDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDDeclaration__Group__0__Impl
	rule__IDDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDDeclarationAccess().getIdAssignment_0()); }
(rule__IDDeclaration__IdAssignment_0)
{ after(grammarAccess.getIDDeclarationAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDDeclarationAccess().getGroup_1()); }
(rule__IDDeclaration__Group_1__0)?
{ after(grammarAccess.getIDDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IDDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDDeclaration__Group_1__0__Impl
	rule__IDDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDDeclarationAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getIDDeclarationAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDDeclarationAccess().getValueAssignment_1_1()); }
(rule__IDDeclaration__ValueAssignment_1_1)
{ after(grammarAccess.getIDDeclarationAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group__0__Impl
	rule__Expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getTermParserRuleCall_0()); }
	ruleTerm
{ after(grammarAccess.getExprAccess().getTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getGroup_1()); }
(rule__Expr__Group_1__0)*
{ after(grammarAccess.getExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group_1__0__Impl
	rule__Expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getExprAccess().getExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group_1__1__Impl
	rule__Expr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getOperatorAssignment_1_1()); }
(rule__Expr__OperatorAssignment_1_1)
{ after(grammarAccess.getExprAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getRightAssignment_1_2()); }
(rule__Expr__RightAssignment_1_2)
{ after(grammarAccess.getExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
	ruleFactor
{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)*
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTermLeftAction_1_0()); }
(

)
{ after(grammarAccess.getTermAccess().getTermLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
	rule__Term__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getOperatorAssignment_1_1()); }
(rule__Term__OperatorAssignment_1_1)
{ after(grammarAccess.getTermAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightAssignment_1_2()); }
(rule__Term__RightAssignment_1_2)
{ after(grammarAccess.getTermAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Factor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getAtomicParserRuleCall_0()); }
	ruleAtomic
{ after(grammarAccess.getFactorAccess().getAtomicParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getGroup_1()); }
(rule__Factor__Group_1__0)*
{ after(grammarAccess.getFactorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Factor__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getFactorLeftAction_1_0()); }
(

)
{ after(grammarAccess.getFactorAccess().getFactorLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_1__1__Impl
	rule__Factor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
(rule__Factor__OperatorAssignment_1_1)
{ after(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
(rule__Factor__RightAssignment_1_2)
{ after(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atomic__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__1__Impl
	rule__Atomic__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
(rule__Atomic__ValueAssignment_0_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Code__DeclarationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getDeclarationsDeclarationParserRuleCall_0_0()); }
	ruleDeclaration{ after(grammarAccess.getCodeAccess().getDeclarationsDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Code__FunctionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getFunctionsFunctionParserRuleCall_1_0()); }
	ruleFunction{ after(grammarAccess.getCodeAccess().getFunctionsFunctionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getFunctionAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamFuncParamParserRuleCall_3_0()); }
	ruleFuncParam{ after(grammarAccess.getFunctionAccess().getParamFuncParamParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BlockAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_5_0()); }
	ruleBlock{ after(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getFuncParamAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFuncParamAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__NextAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuncParamAccess().getNextFuncParamParserRuleCall_2_1_0()); }
	ruleFuncParam{ after(grammarAccess.getFuncParamAccess().getNextFuncParamParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__DeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
	ruleDeclaration{ after(grammarAccess.getStatementAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__CommandsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getCommandsCommandParserRuleCall_2_0()); }
	ruleCommand{ after(grammarAccess.getStatementAccess().getCommandsCommandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getExprExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getIfCommandAccess().getExprExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__IfBlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getIfBlockBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getIfCommandAccess().getIfBlockBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfCommand__ElseBlockAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCommandAccess().getElseBlockBlockParserRuleCall_5_1_0()); }
	ruleBlock{ after(grammarAccess.getIfCommandAccess().getElseBlockBlockParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileCommand__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileCommandAccess().getExprExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getWhileCommandAccess().getExprExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileCommand__WhileBlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileCommandAccess().getWhileBlockBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getWhileCommandAccess().getWhileBlockBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnCommand__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnCommandAccess().getExprExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getReturnCommandAccess().getExprExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getValueRDeclarationParserRuleCall_1_0()); }
	ruleRDeclaration{ after(grammarAccess.getDeclarationAccess().getValueRDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RDeclaration__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDeclarationAccess().getIdIDDeclarationParserRuleCall_0_0()); }
	ruleIDDeclaration{ after(grammarAccess.getRDeclarationAccess().getIdIDDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RDeclaration__NextAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDeclarationAccess().getNextRDeclarationParserRuleCall_1_2_0()); }
	ruleRDeclaration{ after(grammarAccess.getRDeclarationAccess().getNextRDeclarationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IDDeclaration__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDDeclarationAccess().getIdIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getIDDeclarationAccess().getIdIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IDDeclaration__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDDeclarationAccess().getValueExprParserRuleCall_1_1_0()); }
	ruleExpr{ after(grammarAccess.getIDDeclarationAccess().getValueExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getOperatorAlternatives_1_1_0()); }
(rule__Expr__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getExprAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getRightTermParserRuleCall_1_2_0()); }
	ruleTerm{ after(grammarAccess.getExprAccess().getRightTermParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getOperatorAlternatives_1_1_0()); }
(rule__Term__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getTermAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_2_0()); }
	ruleFactor{ after(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
(
{ before(grammarAccess.getFactorAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }

	'^' 

{ after(grammarAccess.getFactorAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
)

{ after(grammarAccess.getFactorAccess().getOperatorCircumflexAccentKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightAtomicParserRuleCall_1_2_0()); }
	ruleAtomic{ after(grammarAccess.getFactorAccess().getRightAtomicParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueExprParserRuleCall_0_1_0()); }
	ruleExpr{ after(grammarAccess.getAtomicAccess().getValueExprParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ResultAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getResultElementParserRuleCall_1_0()); }
	ruleElement{ after(grammarAccess.getAtomicAccess().getResultElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getValueIntKeyword_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getValueIntKeyword_0_0()); }

	'int' 

{ after(grammarAccess.getTypeAccess().getValueIntKeyword_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getValueIntKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getValueFloatKeyword_1_0()); }
(
{ before(grammarAccess.getTypeAccess().getValueFloatKeyword_1_0()); }

	'float' 

{ after(grammarAccess.getTypeAccess().getValueFloatKeyword_1_0()); }
)

{ after(grammarAccess.getTypeAccess().getValueFloatKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getValueCharKeyword_2_0()); }
(
{ before(grammarAccess.getTypeAccess().getValueCharKeyword_2_0()); }

	'char' 

{ after(grammarAccess.getTypeAccess().getValueCharKeyword_2_0()); }
)

{ after(grammarAccess.getTypeAccess().getValueCharKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


